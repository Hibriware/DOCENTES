{"ast":null,"code":"import eachWeekendOfInterval from '../eachWeekendOfInterval/index.js';\nimport startOfMonth from '../startOfMonth/index.js';\nimport endOfMonth from '../endOfMonth/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\r\n * @name eachWeekendOfMonth\r\n * @category Month Helpers\r\n * @summary List all the Saturdays and Sundays in the given month.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given month.\r\n *\r\n * @param {Date|Number} date - the given month\r\n * @returns {Date[]} an array containing all the Saturdays and Sundays\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The passed date is invalid\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given month\r\n * var result = eachWeekendOfMonth(new Date(2022, 1, 1))\r\n * //=> [\r\n * //   Sat Feb 05 2022 00:00:00,\r\n * //   Sun Feb 06 2022 00:00:00,\r\n * //   Sat Feb 12 2022 00:00:00,\r\n * //   Sun Feb 13 2022 00:00:00,\r\n * //   Sat Feb 19 2022 00:00:00,\r\n * //   Sun Feb 20 2022 00:00:00,\r\n * //   Sat Feb 26 2022 00:00:00,\r\n * //   Sun Feb 27 2022 00:00:00\r\n * // ]\r\n */\n\nexport default function eachWeekendOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMonth(dirtyDate);\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\n  var endDate = endOfMonth(dirtyDate);\n  return eachWeekendOfInterval({\n    start: startDate,\n    end: endDate\n  });\n}","map":{"version":3,"sources":["E:/Certificados/heroku/docentestoken/DOCENTES/itsrdocentes/node_modules/date-fns/esm/eachWeekendOfMonth/index.js"],"names":["eachWeekendOfInterval","startOfMonth","endOfMonth","requiredArgs","eachWeekendOfMonth","dirtyDate","arguments","startDate","isNaN","RangeError","endDate","start","end"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,mCAAlC;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,eAAe,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AACpDF,EAAAA,YAAY,CAAC,CAAD,EAAIG,SAAJ,CAAZ;AACA,MAAIC,SAAS,GAAGN,YAAY,CAACI,SAAD,CAA5B;AACA,MAAIG,KAAK,CAACD,SAAD,CAAT,EAAsB,MAAM,IAAIE,UAAJ,CAAe,4BAAf,CAAN;AACtB,MAAIC,OAAO,GAAGR,UAAU,CAACG,SAAD,CAAxB;AACA,SAAOL,qBAAqB,CAAC;AAC3BW,IAAAA,KAAK,EAAEJ,SADoB;AAE3BK,IAAAA,GAAG,EAAEF;AAFsB,GAAD,CAA5B;AAID","sourcesContent":["import eachWeekendOfInterval from '../eachWeekendOfInterval/index.js';\r\nimport startOfMonth from '../startOfMonth/index.js';\r\nimport endOfMonth from '../endOfMonth/index.js';\r\nimport requiredArgs from '../_lib/requiredArgs/index.js';\r\n/**\r\n * @name eachWeekendOfMonth\r\n * @category Month Helpers\r\n * @summary List all the Saturdays and Sundays in the given month.\r\n *\r\n * @description\r\n * Get all the Saturdays and Sundays in the given month.\r\n *\r\n * @param {Date|Number} date - the given month\r\n * @returns {Date[]} an array containing all the Saturdays and Sundays\r\n * @throws {TypeError} 1 argument required\r\n * @throws {RangeError} The passed date is invalid\r\n *\r\n * @example\r\n * // Lists all Saturdays and Sundays in the given month\r\n * var result = eachWeekendOfMonth(new Date(2022, 1, 1))\r\n * //=> [\r\n * //   Sat Feb 05 2022 00:00:00,\r\n * //   Sun Feb 06 2022 00:00:00,\r\n * //   Sat Feb 12 2022 00:00:00,\r\n * //   Sun Feb 13 2022 00:00:00,\r\n * //   Sat Feb 19 2022 00:00:00,\r\n * //   Sun Feb 20 2022 00:00:00,\r\n * //   Sat Feb 26 2022 00:00:00,\r\n * //   Sun Feb 27 2022 00:00:00\r\n * // ]\r\n */\r\n\r\nexport default function eachWeekendOfMonth(dirtyDate) {\r\n  requiredArgs(1, arguments);\r\n  var startDate = startOfMonth(dirtyDate);\r\n  if (isNaN(startDate)) throw new RangeError('The passed date is invalid');\r\n  var endDate = endOfMonth(dirtyDate);\r\n  return eachWeekendOfInterval({\r\n    start: startDate,\r\n    end: endDate\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}