{"ast":null,"code":"import decode from 'jwt-decode';\nexport default class AuthService {\n  constructor(domain) {\n    console.log(\"met constructor\");\n    this.domain = domain || \"http://localhost:4000\";\n    this.requestFetch = this.requestFetch.bind(this);\n    this.login = this.login.bind(this); // this.logout = this.logout.bind(this)\n\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(usuario, password) {\n    console.log(usuario, password);\n    return this.requestFetch('/api/login/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        usuario,\n        password\n      })\n    }).then(response => {\n      console.log(response);\n      this.setToken(response.token);\n      this.setUser(response.resul);\n      return Promise.resolve(response);\n    });\n  }\n\n  isLoggedIn() {\n    console.log(\"met isLoggedIn\");\n    return !!this.getToken();\n  }\n\n  setToken(token) {\n    localStorage.setItem('token_id', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token_id');\n  }\n\n  setUser(userJSON) {\n    localStorage.setItem('resul', JSON.stringify(userJSON));\n  }\n\n  getUser() {\n    return JSON.parse(localStorage.getItem('resul'));\n  }\n\n  getUserAccess() {\n    let user = this.getUser();\n\n    if (user) {\n      return user.nombreRol;\n    } else {\n      return false;\n    }\n  }\n\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  logout() {\n    localStorage.removeItem('token_id');\n    localStorage.removeItem('user');\n  }\n\n  requestFetch(urlRelative, opcions) {\n    //inicio\n    console.log(\"peticion de token\");\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (this.isLoggedIn()) {\n      headers['token'] = this.getToken();\n    }\n\n    return fetch(this.domain + urlRelative, {\n      headers,\n      ...opcions\n    }).then(response => response.json()).catch(error => Promise.reject(error));\n  } //fin\n\n\n}","map":{"version":3,"sources":["E:/Certificados/heroku/docentestoken/DOCENTES/itsrdocentes/src/componentes/servicios/AuthService.js"],"names":["decode","AuthService","constructor","domain","console","log","requestFetch","bind","login","getProfile","usuario","password","method","body","JSON","stringify","then","response","setToken","token","setUser","resul","Promise","resolve","isLoggedIn","getToken","localStorage","setItem","getItem","userJSON","getUser","parse","getUserAccess","user","nombreRol","logout","removeItem","urlRelative","opcions","headers","fetch","json","catch","error","reject"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nexport default class AuthService {\r\n\r\n    constructor(domain){\r\n        console.log(\"met constructor\")\r\n\r\n        this.domain = domain || \"http://localhost:4000\"\r\n        this.requestFetch = this.requestFetch.bind(this);\r\n        this.login = this.login.bind(this);\r\n       // this.logout = this.logout.bind(this)\r\n        this.getProfile = this.getProfile.bind(this);\r\n    }\r\n\r\n    login(usuario, password){\r\n        console.log(usuario ,password )\r\n\r\n        return this.requestFetch('/api/login/login',{\r\n            method:'POST',\r\n            body:JSON.stringify({usuario,password})\r\n        }).then(response => {\r\n            console.log(response)\r\n            this.setToken(response.token);\r\n            this.setUser(response.resul);\r\n            return Promise.resolve(response);\r\n        })\r\n    }\r\n\r\n    isLoggedIn(){\r\n        console.log(\"met isLoggedIn\")\r\n        return !! this.getToken();\r\n    }\r\n    \r\n    setToken(token){\r\n        localStorage.setItem('token_id', token);\r\n    }\r\n    \r\n    getToken(){\r\n        return localStorage.getItem('token_id');\r\n    }\r\n\r\n    setUser(userJSON){\r\n        localStorage.setItem('resul',JSON.stringify(userJSON));\r\n    }\r\n    \r\n    getUser(){\r\n        return JSON.parse(localStorage.getItem('resul'));\r\n    }\r\n\r\n    getUserAccess(){\r\n        let user = this.getUser();\r\n        if(user){\r\n            return user.nombreRol;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getProfile(){\r\n        return decode(this.getToken());\r\n    }\r\n\r\n    logout(){\r\n        localStorage.removeItem('token_id');\r\n        localStorage.removeItem('user');\r\n    }\r\n\r\n\r\nrequestFetch(urlRelative, opcions) {//inicio\r\nconsole.log(\"peticion de token\")\r\n   \r\nconst headers ={\r\n        'Accept':'application/json',\r\n        'Content-Type':'application/json'\r\n    }\r\n    if(this.isLoggedIn()){\r\n        headers['token'] = this.getToken();\r\n    }\r\n    return fetch(this.domain + urlRelative,{\r\n        headers,\r\n        ...opcions\r\n    }).then(response => response.json()).catch(\r\n        error => Promise.reject(error)\r\n    )\r\n}//fin\r\n\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}