{"ast":null,"code":"var _jsxFileName = \"E:\\\\Certificados\\\\itsrdocentes\\\\itsrdocentes\\\\src\\\\componentes\\\\administrador\\\\funciones.js\";\nimport React from 'react';\nimport Backdrop from '@material-ui/core/Backdrop';\nimport moment from 'moment';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport swal from 'sweetalert';\nimport { crearRegistrosfechas, updateRegistrosfechas, restablecerStatus, dataFechasCierre, EXISTNCIA_ACTA, getPeriodo } from '../servicios/api';\nimport { useStyles } from './styles';\nexport const Btn_evaluar = fechas => {\n  console.log(fechas);\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n\n  const enviar = async () => {\n    if (fechas.periodo) {\n      if (moment(fechas.segunda).format('YYYY-MM-DD') > moment(fechas.primera).format('YYYY-MM-DD') && moment(fechas.tercera).format('YYYY-MM-DD') > moment(fechas.segunda).format('YYYY-MM-DD') && moment(fechas.final).format('YYYY-MM-DD') > moment(fechas.tercera).format('YYYY-MM-DD')) {\n        setLoading(true);\n\n        if (fechas.isDisable) {\n          console.log('creando fechas');\n          await crearRegistrosfechas(fechas);\n        } else {\n          let STATUS_ACTUAL = dataFechasCierre[0].status;\n          console.log(fechas.status);\n          console.log(STATUS_ACTUAL);\n\n          if (fechas.status != STATUS_ACTUAL) {\n            console.log('BORRAR__STATUS__Y__ASIGNAR_NEW');\n            await restablecerStatus();\n          }\n\n          console.log('actualizando fechas NORMAL');\n          await updateRegistrosfechas(fechas);\n        } //await getPeriodo();\n\n\n        fechas.setRecargar(!fechas.recargar);\n        setLoading(false);\n      } else {\n        swal('Verifique la cronología de fechas, la segunda entrega no puede ser antes que la primera', {\n          button: false\n        });\n      }\n    } else {\n      swal(\"Eliga un periodo\", {\n        button: false\n      });\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, loading), React.createElement(Backdrop, {\n    className: classes.backdrop,\n    open: loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(CircularProgress, {\n    color: \"inherit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), React.createElement(Button, {\n    disabled: fechas.isdisabled,\n    variant: \"outlined\",\n    color: \"primary\",\n    onClick: enviar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, ' ', \"Guardar\"));\n};\nexport default {\n  Btn_evaluar\n};","map":{"version":3,"sources":["E:/Certificados/itsrdocentes/itsrdocentes/src/componentes/administrador/funciones.js"],"names":["React","Backdrop","moment","CircularProgress","Button","swal","crearRegistrosfechas","updateRegistrosfechas","restablecerStatus","dataFechasCierre","EXISTNCIA_ACTA","getPeriodo","useStyles","Btn_evaluar","fechas","console","log","classes","loading","setLoading","useState","enviar","periodo","segunda","format","primera","tercera","final","isDisable","STATUS_ACTUAL","status","setRecargar","recargar","button","backdrop","isdisabled"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport moment from 'moment';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport swal from 'sweetalert';\r\nimport {\r\n\tcrearRegistrosfechas,\r\n\tupdateRegistrosfechas,\r\n\trestablecerStatus,\r\n\tdataFechasCierre,\r\n\tEXISTNCIA_ACTA,\r\n\tgetPeriodo\r\n} from '../servicios/api';\r\nimport { useStyles } from './styles';\r\n\r\nexport const Btn_evaluar = (fechas) => {\r\n\tconsole.log(fechas);\r\n\tconst classes = useStyles();\r\n\tconst [ loading, setLoading ] = React.useState(false);\r\n\r\n\tconst enviar = async () => {\r\n\t\tif (fechas.periodo) {\r\n\t\tif (\r\n\t\t\tmoment(fechas.segunda).format('YYYY-MM-DD') > moment(fechas.primera).format('YYYY-MM-DD') &&\r\n\t\t\tmoment(fechas.tercera).format('YYYY-MM-DD') > moment(fechas.segunda).format('YYYY-MM-DD') &&\r\n\t\t\tmoment(fechas.final).format('YYYY-MM-DD') > moment(fechas.tercera).format('YYYY-MM-DD')\r\n\t\t) {\r\n\t\t\tsetLoading(true);\r\n\t\t\tif (fechas.isDisable) {\r\n\t\t\t\tconsole.log('creando fechas');\r\n\t\t\t\tawait crearRegistrosfechas(fechas);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tlet STATUS_ACTUAL = dataFechasCierre[0].status;\r\n\t\t\t\tconsole.log(fechas.status);\r\n\t\t\t\tconsole.log(STATUS_ACTUAL);\r\n\r\n\t\t\t\tif (fechas.status != STATUS_ACTUAL) {\r\n\t\t\t\t\tconsole.log('BORRAR__STATUS__Y__ASIGNAR_NEW');\r\n\t\t\t\t\tawait restablecerStatus();\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log('actualizando fechas NORMAL');\r\n\r\n\t\t\t\tawait updateRegistrosfechas(fechas);\r\n\t\t\t}\r\n\t\t\t//await getPeriodo();\r\n\t\t\tfechas.setRecargar(!fechas.recargar);\r\n\t\t\tsetLoading(false);\r\n\t\t} else {\r\n\t\t\tswal('Verifique la cronología de fechas, la segunda entrega no puede ser antes que la primera', {\r\n\t\t\t\tbutton: false\r\n\t\t\t});\r\n\t\t}\r\n\t\t} else {\r\n            swal(\"Eliga un periodo\", {\r\n                button: false,\r\n              });\r\n            \r\n        }\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t<p>{loading}</p>\r\n\t\t\t<Backdrop className={classes.backdrop} open={loading}>\r\n\t\t\t\t<CircularProgress color=\"inherit\" />\r\n\t\t\t</Backdrop>\r\n\t\t\t<Button disabled={fechas.isdisabled} variant=\"outlined\" color=\"primary\" onClick={enviar}>\r\n\t\t\t\t{' '}\r\n\t\t\t\tGuardar\r\n\t\t\t</Button>\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default { Btn_evaluar };\r\n"]},"metadata":{},"sourceType":"module"}