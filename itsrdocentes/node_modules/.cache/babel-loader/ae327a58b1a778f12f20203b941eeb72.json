{"ast":null,"code":"import decode from 'jwt-decode';\nexport default class AuthService {\n  constructor(domain) {\n    this.domain = domain || \"http://localhost:4000\";\n    this.requestFetch = this.requestFetch.bind(this);\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.getProfile = this.getProfile.bind(this);\n  }\n\n  login(usuario, password) {\n    return this.requestFetch('/api/login/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        usuario,\n        password\n      })\n    }).then(response => {\n      console.log(response);\n      this.setToken(response.tokenReturn);\n      this.setUser(response.user);\n      return Promise.resolve(response);\n    });\n  }\n\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n\n  setToken(token) {\n    localStorage.setItem('token_id', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token_id');\n  }\n\n  setUser(userJSON) {\n    localStorage.setItem('user', JSON.stringify(userJSON));\n  }\n\n  getUser() {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n\n  getUserAccess() {\n    let user = this.getUser();\n\n    if (user) {\n      return user.nombreRol;\n    } else {\n      return false;\n    }\n  }\n\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  logout() {\n    localStorage.removeItem('token_id');\n    localStorage.removeItem('user');\n  }\n\n  requestFetch(urlRelative, opcions) {\n    const headers = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n\n    if (this.isLoggedIn()) {\n      headers['token'] = this.getToken();\n    }\n\n    return fetch(this.domain += urlRelative, {\n      headers,\n      ...opcions\n    }).then(response => response.json()).catch(error => Promise.reject(error));\n  }\n\n}","map":{"version":3,"sources":["E:/Certificados/heroku/docentestoken/DOCENTES/itsrdocentes/src/componentes/servicios/AuthService.js"],"names":["decode","AuthService","constructor","domain","requestFetch","bind","login","logout","getProfile","usuario","password","method","body","JSON","stringify","then","response","console","log","setToken","tokenReturn","setUser","user","Promise","resolve","isLoggedIn","getToken","token","localStorage","setItem","getItem","userJSON","getUser","parse","getUserAccess","nombreRol","removeItem","urlRelative","opcions","headers","fetch","json","catch","error","reject"],"mappings":"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","sourcesContent":["import decode from 'jwt-decode';\r\n\r\nexport default class AuthService {\r\n\r\n    constructor(domain){\r\n        this.domain = domain || \"http://localhost:4000\"\r\n        this.requestFetch = this.requestFetch.bind(this);\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this)\r\n        this.getProfile = this.getProfile.bind(this);\r\n    }\r\n\r\n    login(usuario, password){\r\n        return this.requestFetch('/api/login/login',{\r\n            method:'POST',\r\n            body:JSON.stringify({usuario,password})\r\n        }).then(response => {\r\n            console.log(response)\r\n            this.setToken(response.tokenReturn);\r\n            this.setUser(response.user);\r\n            return Promise.resolve(response);\r\n        })\r\n    }\r\n\r\n    isLoggedIn(){\r\n        return !! this.getToken();\r\n    }\r\n    \r\n    setToken(token){\r\n        localStorage.setItem('token_id', token);\r\n    }\r\n    \r\n    getToken(){\r\n        return localStorage.getItem('token_id');\r\n    }\r\n\r\n    setUser(userJSON){\r\n        localStorage.setItem('user',JSON.stringify(userJSON));\r\n    }\r\n    \r\n    getUser(){\r\n        return JSON.parse(localStorage.getItem('user'));\r\n    }\r\n\r\n    getUserAccess(){\r\n        let user = this.getUser();\r\n        if(user){\r\n            return user.nombreRol;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getProfile(){\r\n        return decode(this.getToken());\r\n    }\r\n\r\n    logout(){\r\n        localStorage.removeItem('token_id');\r\n        localStorage.removeItem('user');\r\n    }\r\nrequestFetch(urlRelative, opcions) {\r\n\r\n    const headers ={\r\n        'Accept':'application/json',\r\n        'Content-Type':'application/json'\r\n    }\r\n    if(this.isLoggedIn()){\r\n        headers['token'] = this.getToken();\r\n    }\r\n    return fetch(this.domain+=urlRelative,{\r\n        headers,\r\n        ...opcions\r\n    }).then(response => response.json()).catch(\r\n        error => Promise.reject(error)\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}