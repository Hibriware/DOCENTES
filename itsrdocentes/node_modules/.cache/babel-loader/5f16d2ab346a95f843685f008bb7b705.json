{"ast":null,"code":"import differenceInCalendarDays from '../differenceInCalendarDays/index.js';\nimport startOfWeekYear from '../startOfWeekYear/index.js';\nimport toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\r\n * @name setWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Set the local week-numbering year to the given date.\r\n *\r\n * @description\r\n * Set the local week-numbering year to the given date,\r\n * saving the week number and the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} weekYear - the local week-numbering year of the new date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Date} the new date with the local week-numbering year set\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\r\n * var result = setWeekYear(new Date(2010, 0, 2), 2004)\r\n * //=> Sat Jan 03 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the local week-numbering year 2004 to 2 January 2010,\r\n * // if Monday is the first day of week\r\n * // and 4 January is always in the first week of the year:\r\n * var result = setWeekYear(new Date(2010, 0, 2), 2004, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sat Jan 01 2005 00:00:00\r\n */\n\nexport default function setWeekYear(dirtyDate, dirtyWeekYear, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var date = toDate(dirtyDate);\n  var weekYear = toInteger(dirtyWeekYear);\n  var diff = differenceInCalendarDays(date, startOfWeekYear(date, dirtyOptions));\n  var firstWeek = new Date(0);\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  date = startOfWeekYear(firstWeek, dirtyOptions);\n  date.setDate(date.getDate() + diff);\n  return date;\n}","map":{"version":3,"sources":["E:/Certificados/heroku/docentestoken/DOCENTES/itsrdocentes/node_modules/date-fns/esm/setWeekYear/index.js"],"names":["differenceInCalendarDays","startOfWeekYear","toDate","toInteger","requiredArgs","setWeekYear","dirtyDate","dirtyWeekYear","dirtyOptions","arguments","options","locale","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","date","weekYear","diff","firstWeek","Date","setFullYear","setHours","setDate","getDate"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,sCAArC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,eAAe,SAASC,WAAT,CAAqBC,SAArB,EAAgCC,aAAhC,EAA+CC,YAA/C,EAA6D;AAC1EJ,EAAAA,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;AACA,MAAIC,OAAO,GAAGF,YAAY,IAAI,EAA9B;AACA,MAAIG,MAAM,GAAGD,OAAO,CAACC,MAArB;AACA,MAAIC,2BAA2B,GAAGD,MAAM,IAAIA,MAAM,CAACD,OAAjB,IAA4BC,MAAM,CAACD,OAAP,CAAeG,qBAA7E;AACA,MAAIC,4BAA4B,GAAGF,2BAA2B,IAAI,IAA/B,GAAsC,CAAtC,GAA0CT,SAAS,CAACS,2BAAD,CAAtF;AACA,MAAIC,qBAAqB,GAAGH,OAAO,CAACG,qBAAR,IAAiC,IAAjC,GAAwCC,4BAAxC,GAAuEX,SAAS,CAACO,OAAO,CAACG,qBAAT,CAA5G;AACA,MAAIE,IAAI,GAAGb,MAAM,CAACI,SAAD,CAAjB;AACA,MAAIU,QAAQ,GAAGb,SAAS,CAACI,aAAD,CAAxB;AACA,MAAIU,IAAI,GAAGjB,wBAAwB,CAACe,IAAD,EAAOd,eAAe,CAACc,IAAD,EAAOP,YAAP,CAAtB,CAAnC;AACA,MAAIU,SAAS,GAAG,IAAIC,IAAJ,CAAS,CAAT,CAAhB;AACAD,EAAAA,SAAS,CAACE,WAAV,CAAsBJ,QAAtB,EAAgC,CAAhC,EAAmCH,qBAAnC;AACAK,EAAAA,SAAS,CAACG,QAAV,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B;AACAN,EAAAA,IAAI,GAAGd,eAAe,CAACiB,SAAD,EAAYV,YAAZ,CAAtB;AACAO,EAAAA,IAAI,CAACO,OAAL,CAAaP,IAAI,CAACQ,OAAL,KAAiBN,IAA9B;AACA,SAAOF,IAAP;AACD","sourcesContent":["import differenceInCalendarDays from '../differenceInCalendarDays/index.js';\r\nimport startOfWeekYear from '../startOfWeekYear/index.js';\r\nimport toDate from '../toDate/index.js';\r\nimport toInteger from '../_lib/toInteger/index.js';\r\nimport requiredArgs from '../_lib/requiredArgs/index.js';\r\n/**\r\n * @name setWeekYear\r\n * @category Week-Numbering Year Helpers\r\n * @summary Set the local week-numbering year to the given date.\r\n *\r\n * @description\r\n * Set the local week-numbering year to the given date,\r\n * saving the week number and the weekday number.\r\n * The exact calculation depends on the values of\r\n * `options.weekStartsOn` (which is the index of the first day of the week)\r\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\r\n * the first week of the week-numbering year)\r\n *\r\n * Week numbering: https://en.wikipedia.org/wiki/Week#Week_numbering\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} weekYear - the local week-numbering year of the new date\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @returns {Date} the new date with the local week-numbering year set\r\n * @throws {TypeError} 2 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n *\r\n * @example\r\n * // Set the local week-numbering year 2004 to 2 January 2010 with default options:\r\n * var result = setWeekYear(new Date(2010, 0, 2), 2004)\r\n * //=> Sat Jan 03 2004 00:00:00\r\n *\r\n * @example\r\n * // Set the local week-numbering year 2004 to 2 January 2010,\r\n * // if Monday is the first day of week\r\n * // and 4 January is always in the first week of the year:\r\n * var result = setWeekYear(new Date(2010, 0, 2), 2004, {\r\n *   weekStartsOn: 1,\r\n *   firstWeekContainsDate: 4\r\n * })\r\n * //=> Sat Jan 01 2005 00:00:00\r\n */\r\n\r\nexport default function setWeekYear(dirtyDate, dirtyWeekYear, dirtyOptions) {\r\n  requiredArgs(2, arguments);\r\n  var options = dirtyOptions || {};\r\n  var locale = options.locale;\r\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\r\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\r\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\r\n  var date = toDate(dirtyDate);\r\n  var weekYear = toInteger(dirtyWeekYear);\r\n  var diff = differenceInCalendarDays(date, startOfWeekYear(date, dirtyOptions));\r\n  var firstWeek = new Date(0);\r\n  firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);\r\n  firstWeek.setHours(0, 0, 0, 0);\r\n  date = startOfWeekYear(firstWeek, dirtyOptions);\r\n  date.setDate(date.getDate() + diff);\r\n  return date;\r\n}"]},"metadata":{},"sourceType":"module"}